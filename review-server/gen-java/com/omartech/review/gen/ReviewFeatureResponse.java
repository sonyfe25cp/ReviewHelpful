/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.omartech.review.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-7")
public class ReviewFeatureResponse implements org.apache.thrift.TBase<ReviewFeatureResponse, ReviewFeatureResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ReviewFeatureResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReviewFeatureResponse");

  private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ADJS_FIELD_DESC = new org.apache.thrift.protocol.TField("adjs", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReviewFeatureResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReviewFeatureResponseTupleSchemeFactory());
  }

  public SentenceRequest req; // required
  public List<String> words; // required
  public List<String> adjs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQ((short)1, "req"),
    WORDS((short)2, "words"),
    ADJS((short)3, "adjs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQ
          return REQ;
        case 2: // WORDS
          return WORDS;
        case 3: // ADJS
          return ADJS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SentenceRequest.class)));
    tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ADJS, new org.apache.thrift.meta_data.FieldMetaData("adjs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReviewFeatureResponse.class, metaDataMap);
  }

  public ReviewFeatureResponse() {
  }

  public ReviewFeatureResponse(
    SentenceRequest req,
    List<String> words,
    List<String> adjs)
  {
    this();
    this.req = req;
    this.words = words;
    this.adjs = adjs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReviewFeatureResponse(ReviewFeatureResponse other) {
    if (other.isSetReq()) {
      this.req = new SentenceRequest(other.req);
    }
    if (other.isSetWords()) {
      List<String> __this__words = new ArrayList<String>(other.words);
      this.words = __this__words;
    }
    if (other.isSetAdjs()) {
      List<String> __this__adjs = new ArrayList<String>(other.adjs);
      this.adjs = __this__adjs;
    }
  }

  public ReviewFeatureResponse deepCopy() {
    return new ReviewFeatureResponse(this);
  }

  @Override
  public void clear() {
    this.req = null;
    this.words = null;
    this.adjs = null;
  }

  public SentenceRequest getReq() {
    return this.req;
  }

  public ReviewFeatureResponse setReq(SentenceRequest req) {
    this.req = req;
    return this;
  }

  public void unsetReq() {
    this.req = null;
  }

  /** Returns true if field req is set (has been assigned a value) and false otherwise */
  public boolean isSetReq() {
    return this.req != null;
  }

  public void setReqIsSet(boolean value) {
    if (!value) {
      this.req = null;
    }
  }

  public int getWordsSize() {
    return (this.words == null) ? 0 : this.words.size();
  }

  public java.util.Iterator<String> getWordsIterator() {
    return (this.words == null) ? null : this.words.iterator();
  }

  public void addToWords(String elem) {
    if (this.words == null) {
      this.words = new ArrayList<String>();
    }
    this.words.add(elem);
  }

  public List<String> getWords() {
    return this.words;
  }

  public ReviewFeatureResponse setWords(List<String> words) {
    this.words = words;
    return this;
  }

  public void unsetWords() {
    this.words = null;
  }

  /** Returns true if field words is set (has been assigned a value) and false otherwise */
  public boolean isSetWords() {
    return this.words != null;
  }

  public void setWordsIsSet(boolean value) {
    if (!value) {
      this.words = null;
    }
  }

  public int getAdjsSize() {
    return (this.adjs == null) ? 0 : this.adjs.size();
  }

  public java.util.Iterator<String> getAdjsIterator() {
    return (this.adjs == null) ? null : this.adjs.iterator();
  }

  public void addToAdjs(String elem) {
    if (this.adjs == null) {
      this.adjs = new ArrayList<String>();
    }
    this.adjs.add(elem);
  }

  public List<String> getAdjs() {
    return this.adjs;
  }

  public ReviewFeatureResponse setAdjs(List<String> adjs) {
    this.adjs = adjs;
    return this;
  }

  public void unsetAdjs() {
    this.adjs = null;
  }

  /** Returns true if field adjs is set (has been assigned a value) and false otherwise */
  public boolean isSetAdjs() {
    return this.adjs != null;
  }

  public void setAdjsIsSet(boolean value) {
    if (!value) {
      this.adjs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQ:
      if (value == null) {
        unsetReq();
      } else {
        setReq((SentenceRequest)value);
      }
      break;

    case WORDS:
      if (value == null) {
        unsetWords();
      } else {
        setWords((List<String>)value);
      }
      break;

    case ADJS:
      if (value == null) {
        unsetAdjs();
      } else {
        setAdjs((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQ:
      return getReq();

    case WORDS:
      return getWords();

    case ADJS:
      return getAdjs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQ:
      return isSetReq();
    case WORDS:
      return isSetWords();
    case ADJS:
      return isSetAdjs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReviewFeatureResponse)
      return this.equals((ReviewFeatureResponse)that);
    return false;
  }

  public boolean equals(ReviewFeatureResponse that) {
    if (that == null)
      return false;

    boolean this_present_req = true && this.isSetReq();
    boolean that_present_req = true && that.isSetReq();
    if (this_present_req || that_present_req) {
      if (!(this_present_req && that_present_req))
        return false;
      if (!this.req.equals(that.req))
        return false;
    }

    boolean this_present_words = true && this.isSetWords();
    boolean that_present_words = true && that.isSetWords();
    if (this_present_words || that_present_words) {
      if (!(this_present_words && that_present_words))
        return false;
      if (!this.words.equals(that.words))
        return false;
    }

    boolean this_present_adjs = true && this.isSetAdjs();
    boolean that_present_adjs = true && that.isSetAdjs();
    if (this_present_adjs || that_present_adjs) {
      if (!(this_present_adjs && that_present_adjs))
        return false;
      if (!this.adjs.equals(that.adjs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_req = true && (isSetReq());
    list.add(present_req);
    if (present_req)
      list.add(req);

    boolean present_words = true && (isSetWords());
    list.add(present_words);
    if (present_words)
      list.add(words);

    boolean present_adjs = true && (isSetAdjs());
    list.add(present_adjs);
    if (present_adjs)
      list.add(adjs);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReviewFeatureResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWords()).compareTo(other.isSetWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, other.words);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdjs()).compareTo(other.isSetAdjs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdjs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adjs, other.adjs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReviewFeatureResponse(");
    boolean first = true;

    sb.append("req:");
    if (this.req == null) {
      sb.append("null");
    } else {
      sb.append(this.req);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("words:");
    if (this.words == null) {
      sb.append("null");
    } else {
      sb.append(this.words);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adjs:");
    if (this.adjs == null) {
      sb.append("null");
    } else {
      sb.append(this.adjs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (req != null) {
      req.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReviewFeatureResponseStandardSchemeFactory implements SchemeFactory {
    public ReviewFeatureResponseStandardScheme getScheme() {
      return new ReviewFeatureResponseStandardScheme();
    }
  }

  private static class ReviewFeatureResponseStandardScheme extends StandardScheme<ReviewFeatureResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReviewFeatureResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.req = new SentenceRequest();
              struct.req.read(iprot);
              struct.setReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.words = new ArrayList<String>(_list38.size);
                String _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = iprot.readString();
                  struct.words.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADJS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.adjs = new ArrayList<String>(_list41.size);
                String _elem42;
                for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                {
                  _elem42 = iprot.readString();
                  struct.adjs.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setAdjsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReviewFeatureResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.req != null) {
        oprot.writeFieldBegin(REQ_FIELD_DESC);
        struct.req.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.words != null) {
        oprot.writeFieldBegin(WORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.words.size()));
          for (String _iter44 : struct.words)
          {
            oprot.writeString(_iter44);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.adjs != null) {
        oprot.writeFieldBegin(ADJS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.adjs.size()));
          for (String _iter45 : struct.adjs)
          {
            oprot.writeString(_iter45);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReviewFeatureResponseTupleSchemeFactory implements SchemeFactory {
    public ReviewFeatureResponseTupleScheme getScheme() {
      return new ReviewFeatureResponseTupleScheme();
    }
  }

  private static class ReviewFeatureResponseTupleScheme extends TupleScheme<ReviewFeatureResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReviewFeatureResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReq()) {
        optionals.set(0);
      }
      if (struct.isSetWords()) {
        optionals.set(1);
      }
      if (struct.isSetAdjs()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReq()) {
        struct.req.write(oprot);
      }
      if (struct.isSetWords()) {
        {
          oprot.writeI32(struct.words.size());
          for (String _iter46 : struct.words)
          {
            oprot.writeString(_iter46);
          }
        }
      }
      if (struct.isSetAdjs()) {
        {
          oprot.writeI32(struct.adjs.size());
          for (String _iter47 : struct.adjs)
          {
            oprot.writeString(_iter47);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReviewFeatureResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.req = new SentenceRequest();
        struct.req.read(iprot);
        struct.setReqIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list48 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.words = new ArrayList<String>(_list48.size);
          String _elem49;
          for (int _i50 = 0; _i50 < _list48.size; ++_i50)
          {
            _elem49 = iprot.readString();
            struct.words.add(_elem49);
          }
        }
        struct.setWordsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.adjs = new ArrayList<String>(_list51.size);
          String _elem52;
          for (int _i53 = 0; _i53 < _list51.size; ++_i53)
          {
            _elem52 = iprot.readString();
            struct.adjs.add(_elem52);
          }
        }
        struct.setAdjsIsSet(true);
      }
    }
  }

}

