/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.omartech.review.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-7")
public class SentenceRequest implements org.apache.thrift.TBase<SentenceRequest, SentenceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<SentenceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SentenceRequest");

  private static final org.apache.thrift.protocol.TField SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sentence", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENTENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("sentences", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OVER_FIELD_DESC = new org.apache.thrift.protocol.TField("over", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField CLEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("clear", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SentenceRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SentenceRequestTupleSchemeFactory());
  }

  public String sentence; // required
  public List<String> sentences; // required
  public boolean over; // required
  public boolean clear; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENTENCE((short)1, "sentence"),
    SENTENCES((short)2, "sentences"),
    OVER((short)3, "over"),
    CLEAR((short)4, "clear");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENTENCE
          return SENTENCE;
        case 2: // SENTENCES
          return SENTENCES;
        case 3: // OVER
          return OVER;
        case 4: // CLEAR
          return CLEAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OVER_ISSET_ID = 0;
  private static final int __CLEAR_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("sentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENTENCES, new org.apache.thrift.meta_data.FieldMetaData("sentences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OVER, new org.apache.thrift.meta_data.FieldMetaData("over", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLEAR, new org.apache.thrift.meta_data.FieldMetaData("clear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SentenceRequest.class, metaDataMap);
  }

  public SentenceRequest() {
  }

  public SentenceRequest(
    String sentence,
    List<String> sentences,
    boolean over,
    boolean clear)
  {
    this();
    this.sentence = sentence;
    this.sentences = sentences;
    this.over = over;
    setOverIsSet(true);
    this.clear = clear;
    setClearIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SentenceRequest(SentenceRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSentence()) {
      this.sentence = other.sentence;
    }
    if (other.isSetSentences()) {
      List<String> __this__sentences = new ArrayList<String>(other.sentences);
      this.sentences = __this__sentences;
    }
    this.over = other.over;
    this.clear = other.clear;
  }

  public SentenceRequest deepCopy() {
    return new SentenceRequest(this);
  }

  @Override
  public void clear() {
    this.sentence = null;
    this.sentences = null;
    setOverIsSet(false);
    this.over = false;
    setClearIsSet(false);
    this.clear = false;
  }

  public String getSentence() {
    return this.sentence;
  }

  public SentenceRequest setSentence(String sentence) {
    this.sentence = sentence;
    return this;
  }

  public void unsetSentence() {
    this.sentence = null;
  }

  /** Returns true if field sentence is set (has been assigned a value) and false otherwise */
  public boolean isSetSentence() {
    return this.sentence != null;
  }

  public void setSentenceIsSet(boolean value) {
    if (!value) {
      this.sentence = null;
    }
  }

  public int getSentencesSize() {
    return (this.sentences == null) ? 0 : this.sentences.size();
  }

  public java.util.Iterator<String> getSentencesIterator() {
    return (this.sentences == null) ? null : this.sentences.iterator();
  }

  public void addToSentences(String elem) {
    if (this.sentences == null) {
      this.sentences = new ArrayList<String>();
    }
    this.sentences.add(elem);
  }

  public List<String> getSentences() {
    return this.sentences;
  }

  public SentenceRequest setSentences(List<String> sentences) {
    this.sentences = sentences;
    return this;
  }

  public void unsetSentences() {
    this.sentences = null;
  }

  /** Returns true if field sentences is set (has been assigned a value) and false otherwise */
  public boolean isSetSentences() {
    return this.sentences != null;
  }

  public void setSentencesIsSet(boolean value) {
    if (!value) {
      this.sentences = null;
    }
  }

  public boolean isOver() {
    return this.over;
  }

  public SentenceRequest setOver(boolean over) {
    this.over = over;
    setOverIsSet(true);
    return this;
  }

  public void unsetOver() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVER_ISSET_ID);
  }

  /** Returns true if field over is set (has been assigned a value) and false otherwise */
  public boolean isSetOver() {
    return EncodingUtils.testBit(__isset_bitfield, __OVER_ISSET_ID);
  }

  public void setOverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVER_ISSET_ID, value);
  }

  public boolean isClear() {
    return this.clear;
  }

  public SentenceRequest setClear(boolean clear) {
    this.clear = clear;
    setClearIsSet(true);
    return this;
  }

  public void unsetClear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEAR_ISSET_ID);
  }

  /** Returns true if field clear is set (has been assigned a value) and false otherwise */
  public boolean isSetClear() {
    return EncodingUtils.testBit(__isset_bitfield, __CLEAR_ISSET_ID);
  }

  public void setClearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEAR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SENTENCE:
      if (value == null) {
        unsetSentence();
      } else {
        setSentence((String)value);
      }
      break;

    case SENTENCES:
      if (value == null) {
        unsetSentences();
      } else {
        setSentences((List<String>)value);
      }
      break;

    case OVER:
      if (value == null) {
        unsetOver();
      } else {
        setOver((Boolean)value);
      }
      break;

    case CLEAR:
      if (value == null) {
        unsetClear();
      } else {
        setClear((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENTENCE:
      return getSentence();

    case SENTENCES:
      return getSentences();

    case OVER:
      return Boolean.valueOf(isOver());

    case CLEAR:
      return Boolean.valueOf(isClear());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENTENCE:
      return isSetSentence();
    case SENTENCES:
      return isSetSentences();
    case OVER:
      return isSetOver();
    case CLEAR:
      return isSetClear();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SentenceRequest)
      return this.equals((SentenceRequest)that);
    return false;
  }

  public boolean equals(SentenceRequest that) {
    if (that == null)
      return false;

    boolean this_present_sentence = true && this.isSetSentence();
    boolean that_present_sentence = true && that.isSetSentence();
    if (this_present_sentence || that_present_sentence) {
      if (!(this_present_sentence && that_present_sentence))
        return false;
      if (!this.sentence.equals(that.sentence))
        return false;
    }

    boolean this_present_sentences = true && this.isSetSentences();
    boolean that_present_sentences = true && that.isSetSentences();
    if (this_present_sentences || that_present_sentences) {
      if (!(this_present_sentences && that_present_sentences))
        return false;
      if (!this.sentences.equals(that.sentences))
        return false;
    }

    boolean this_present_over = true;
    boolean that_present_over = true;
    if (this_present_over || that_present_over) {
      if (!(this_present_over && that_present_over))
        return false;
      if (this.over != that.over)
        return false;
    }

    boolean this_present_clear = true;
    boolean that_present_clear = true;
    if (this_present_clear || that_present_clear) {
      if (!(this_present_clear && that_present_clear))
        return false;
      if (this.clear != that.clear)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sentence = true && (isSetSentence());
    list.add(present_sentence);
    if (present_sentence)
      list.add(sentence);

    boolean present_sentences = true && (isSetSentences());
    list.add(present_sentences);
    if (present_sentences)
      list.add(sentences);

    boolean present_over = true;
    list.add(present_over);
    if (present_over)
      list.add(over);

    boolean present_clear = true;
    list.add(present_clear);
    if (present_clear)
      list.add(clear);

    return list.hashCode();
  }

  @Override
  public int compareTo(SentenceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSentence()).compareTo(other.isSetSentence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentence, other.sentence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentences()).compareTo(other.isSetSentences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentences, other.sentences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOver()).compareTo(other.isSetOver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.over, other.over);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClear()).compareTo(other.isSetClear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clear, other.clear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SentenceRequest(");
    boolean first = true;

    sb.append("sentence:");
    if (this.sentence == null) {
      sb.append("null");
    } else {
      sb.append(this.sentence);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sentences:");
    if (this.sentences == null) {
      sb.append("null");
    } else {
      sb.append(this.sentences);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("over:");
    sb.append(this.over);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clear:");
    sb.append(this.clear);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SentenceRequestStandardSchemeFactory implements SchemeFactory {
    public SentenceRequestStandardScheme getScheme() {
      return new SentenceRequestStandardScheme();
    }
  }

  private static class SentenceRequestStandardScheme extends StandardScheme<SentenceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SentenceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENTENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sentence = iprot.readString();
              struct.setSentenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENTENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.sentences = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.sentences.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSentencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.over = iprot.readBool();
              struct.setOverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clear = iprot.readBool();
              struct.setClearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SentenceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sentence != null) {
        oprot.writeFieldBegin(SENTENCE_FIELD_DESC);
        oprot.writeString(struct.sentence);
        oprot.writeFieldEnd();
      }
      if (struct.sentences != null) {
        oprot.writeFieldBegin(SENTENCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sentences.size()));
          for (String _iter3 : struct.sentences)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVER_FIELD_DESC);
      oprot.writeBool(struct.over);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLEAR_FIELD_DESC);
      oprot.writeBool(struct.clear);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SentenceRequestTupleSchemeFactory implements SchemeFactory {
    public SentenceRequestTupleScheme getScheme() {
      return new SentenceRequestTupleScheme();
    }
  }

  private static class SentenceRequestTupleScheme extends TupleScheme<SentenceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SentenceRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSentence()) {
        optionals.set(0);
      }
      if (struct.isSetSentences()) {
        optionals.set(1);
      }
      if (struct.isSetOver()) {
        optionals.set(2);
      }
      if (struct.isSetClear()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSentence()) {
        oprot.writeString(struct.sentence);
      }
      if (struct.isSetSentences()) {
        {
          oprot.writeI32(struct.sentences.size());
          for (String _iter4 : struct.sentences)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetOver()) {
        oprot.writeBool(struct.over);
      }
      if (struct.isSetClear()) {
        oprot.writeBool(struct.clear);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SentenceRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sentence = iprot.readString();
        struct.setSentenceIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sentences = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.sentences.add(_elem6);
          }
        }
        struct.setSentencesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.over = iprot.readBool();
        struct.setOverIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clear = iprot.readBool();
        struct.setClearIsSet(true);
      }
    }
  }

}

