/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.omartech.review.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-9")
public class TFIDFResponse implements org.apache.thrift.TBase<TFIDFResponse, TFIDFResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TFIDFResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFIDFResponse");

  private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField STRING_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringMap", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField POSITION_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("positionMap", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField LEXICON_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("lexiconSize", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TFIDFResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TFIDFResponseTupleSchemeFactory());
  }

  public SentenceRequest req; // required
  public Map<String,Double> stringMap; // required
  public Map<Integer,Double> positionMap; // required
  public int lexiconSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQ((short)1, "req"),
    STRING_MAP((short)2, "stringMap"),
    POSITION_MAP((short)3, "positionMap"),
    LEXICON_SIZE((short)4, "lexiconSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQ
          return REQ;
        case 2: // STRING_MAP
          return STRING_MAP;
        case 3: // POSITION_MAP
          return POSITION_MAP;
        case 4: // LEXICON_SIZE
          return LEXICON_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEXICONSIZE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SentenceRequest.class)));
    tmpMap.put(_Fields.STRING_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.POSITION_MAP, new org.apache.thrift.meta_data.FieldMetaData("positionMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.LEXICON_SIZE, new org.apache.thrift.meta_data.FieldMetaData("lexiconSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFIDFResponse.class, metaDataMap);
  }

  public TFIDFResponse() {
  }

  public TFIDFResponse(
    SentenceRequest req,
    Map<String,Double> stringMap,
    Map<Integer,Double> positionMap,
    int lexiconSize)
  {
    this();
    this.req = req;
    this.stringMap = stringMap;
    this.positionMap = positionMap;
    this.lexiconSize = lexiconSize;
    setLexiconSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFIDFResponse(TFIDFResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReq()) {
      this.req = new SentenceRequest(other.req);
    }
    if (other.isSetStringMap()) {
      Map<String,Double> __this__stringMap = new HashMap<String,Double>(other.stringMap);
      this.stringMap = __this__stringMap;
    }
    if (other.isSetPositionMap()) {
      Map<Integer,Double> __this__positionMap = new HashMap<Integer,Double>(other.positionMap);
      this.positionMap = __this__positionMap;
    }
    this.lexiconSize = other.lexiconSize;
  }

  public TFIDFResponse deepCopy() {
    return new TFIDFResponse(this);
  }

  @Override
  public void clear() {
    this.req = null;
    this.stringMap = null;
    this.positionMap = null;
    setLexiconSizeIsSet(false);
    this.lexiconSize = 0;
  }

  public SentenceRequest getReq() {
    return this.req;
  }

  public TFIDFResponse setReq(SentenceRequest req) {
    this.req = req;
    return this;
  }

  public void unsetReq() {
    this.req = null;
  }

  /** Returns true if field req is set (has been assigned a value) and false otherwise */
  public boolean isSetReq() {
    return this.req != null;
  }

  public void setReqIsSet(boolean value) {
    if (!value) {
      this.req = null;
    }
  }

  public int getStringMapSize() {
    return (this.stringMap == null) ? 0 : this.stringMap.size();
  }

  public void putToStringMap(String key, double val) {
    if (this.stringMap == null) {
      this.stringMap = new HashMap<String,Double>();
    }
    this.stringMap.put(key, val);
  }

  public Map<String,Double> getStringMap() {
    return this.stringMap;
  }

  public TFIDFResponse setStringMap(Map<String,Double> stringMap) {
    this.stringMap = stringMap;
    return this;
  }

  public void unsetStringMap() {
    this.stringMap = null;
  }

  /** Returns true if field stringMap is set (has been assigned a value) and false otherwise */
  public boolean isSetStringMap() {
    return this.stringMap != null;
  }

  public void setStringMapIsSet(boolean value) {
    if (!value) {
      this.stringMap = null;
    }
  }

  public int getPositionMapSize() {
    return (this.positionMap == null) ? 0 : this.positionMap.size();
  }

  public void putToPositionMap(int key, double val) {
    if (this.positionMap == null) {
      this.positionMap = new HashMap<Integer,Double>();
    }
    this.positionMap.put(key, val);
  }

  public Map<Integer,Double> getPositionMap() {
    return this.positionMap;
  }

  public TFIDFResponse setPositionMap(Map<Integer,Double> positionMap) {
    this.positionMap = positionMap;
    return this;
  }

  public void unsetPositionMap() {
    this.positionMap = null;
  }

  /** Returns true if field positionMap is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionMap() {
    return this.positionMap != null;
  }

  public void setPositionMapIsSet(boolean value) {
    if (!value) {
      this.positionMap = null;
    }
  }

  public int getLexiconSize() {
    return this.lexiconSize;
  }

  public TFIDFResponse setLexiconSize(int lexiconSize) {
    this.lexiconSize = lexiconSize;
    setLexiconSizeIsSet(true);
    return this;
  }

  public void unsetLexiconSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEXICONSIZE_ISSET_ID);
  }

  /** Returns true if field lexiconSize is set (has been assigned a value) and false otherwise */
  public boolean isSetLexiconSize() {
    return EncodingUtils.testBit(__isset_bitfield, __LEXICONSIZE_ISSET_ID);
  }

  public void setLexiconSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEXICONSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQ:
      if (value == null) {
        unsetReq();
      } else {
        setReq((SentenceRequest)value);
      }
      break;

    case STRING_MAP:
      if (value == null) {
        unsetStringMap();
      } else {
        setStringMap((Map<String,Double>)value);
      }
      break;

    case POSITION_MAP:
      if (value == null) {
        unsetPositionMap();
      } else {
        setPositionMap((Map<Integer,Double>)value);
      }
      break;

    case LEXICON_SIZE:
      if (value == null) {
        unsetLexiconSize();
      } else {
        setLexiconSize((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQ:
      return getReq();

    case STRING_MAP:
      return getStringMap();

    case POSITION_MAP:
      return getPositionMap();

    case LEXICON_SIZE:
      return Integer.valueOf(getLexiconSize());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQ:
      return isSetReq();
    case STRING_MAP:
      return isSetStringMap();
    case POSITION_MAP:
      return isSetPositionMap();
    case LEXICON_SIZE:
      return isSetLexiconSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TFIDFResponse)
      return this.equals((TFIDFResponse)that);
    return false;
  }

  public boolean equals(TFIDFResponse that) {
    if (that == null)
      return false;

    boolean this_present_req = true && this.isSetReq();
    boolean that_present_req = true && that.isSetReq();
    if (this_present_req || that_present_req) {
      if (!(this_present_req && that_present_req))
        return false;
      if (!this.req.equals(that.req))
        return false;
    }

    boolean this_present_stringMap = true && this.isSetStringMap();
    boolean that_present_stringMap = true && that.isSetStringMap();
    if (this_present_stringMap || that_present_stringMap) {
      if (!(this_present_stringMap && that_present_stringMap))
        return false;
      if (!this.stringMap.equals(that.stringMap))
        return false;
    }

    boolean this_present_positionMap = true && this.isSetPositionMap();
    boolean that_present_positionMap = true && that.isSetPositionMap();
    if (this_present_positionMap || that_present_positionMap) {
      if (!(this_present_positionMap && that_present_positionMap))
        return false;
      if (!this.positionMap.equals(that.positionMap))
        return false;
    }

    boolean this_present_lexiconSize = true;
    boolean that_present_lexiconSize = true;
    if (this_present_lexiconSize || that_present_lexiconSize) {
      if (!(this_present_lexiconSize && that_present_lexiconSize))
        return false;
      if (this.lexiconSize != that.lexiconSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_req = true && (isSetReq());
    list.add(present_req);
    if (present_req)
      list.add(req);

    boolean present_stringMap = true && (isSetStringMap());
    list.add(present_stringMap);
    if (present_stringMap)
      list.add(stringMap);

    boolean present_positionMap = true && (isSetPositionMap());
    list.add(present_positionMap);
    if (present_positionMap)
      list.add(positionMap);

    boolean present_lexiconSize = true;
    list.add(present_lexiconSize);
    if (present_lexiconSize)
      list.add(lexiconSize);

    return list.hashCode();
  }

  @Override
  public int compareTo(TFIDFResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringMap()).compareTo(other.isSetStringMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringMap, other.stringMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionMap()).compareTo(other.isSetPositionMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionMap, other.positionMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLexiconSize()).compareTo(other.isSetLexiconSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLexiconSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lexiconSize, other.lexiconSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TFIDFResponse(");
    boolean first = true;

    sb.append("req:");
    if (this.req == null) {
      sb.append("null");
    } else {
      sb.append(this.req);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringMap:");
    if (this.stringMap == null) {
      sb.append("null");
    } else {
      sb.append(this.stringMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionMap:");
    if (this.positionMap == null) {
      sb.append("null");
    } else {
      sb.append(this.positionMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lexiconSize:");
    sb.append(this.lexiconSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (req != null) {
      req.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFIDFResponseStandardSchemeFactory implements SchemeFactory {
    public TFIDFResponseStandardScheme getScheme() {
      return new TFIDFResponseStandardScheme();
    }
  }

  private static class TFIDFResponseStandardScheme extends StandardScheme<TFIDFResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFIDFResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.req = new SentenceRequest();
              struct.req.read(iprot);
              struct.setReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRING_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.stringMap = new HashMap<String,Double>(2*_map8.size);
                String _key9;
                double _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  _val10 = iprot.readDouble();
                  struct.stringMap.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setStringMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSITION_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.positionMap = new HashMap<Integer,Double>(2*_map12.size);
                int _key13;
                double _val14;
                for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                {
                  _key13 = iprot.readI32();
                  _val14 = iprot.readDouble();
                  struct.positionMap.put(_key13, _val14);
                }
                iprot.readMapEnd();
              }
              struct.setPositionMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEXICON_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lexiconSize = iprot.readI32();
              struct.setLexiconSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFIDFResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.req != null) {
        oprot.writeFieldBegin(REQ_FIELD_DESC);
        struct.req.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.stringMap != null) {
        oprot.writeFieldBegin(STRING_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.stringMap.size()));
          for (Map.Entry<String, Double> _iter16 : struct.stringMap.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            oprot.writeDouble(_iter16.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.positionMap != null) {
        oprot.writeFieldBegin(POSITION_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.positionMap.size()));
          for (Map.Entry<Integer, Double> _iter17 : struct.positionMap.entrySet())
          {
            oprot.writeI32(_iter17.getKey());
            oprot.writeDouble(_iter17.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEXICON_SIZE_FIELD_DESC);
      oprot.writeI32(struct.lexiconSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFIDFResponseTupleSchemeFactory implements SchemeFactory {
    public TFIDFResponseTupleScheme getScheme() {
      return new TFIDFResponseTupleScheme();
    }
  }

  private static class TFIDFResponseTupleScheme extends TupleScheme<TFIDFResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFIDFResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReq()) {
        optionals.set(0);
      }
      if (struct.isSetStringMap()) {
        optionals.set(1);
      }
      if (struct.isSetPositionMap()) {
        optionals.set(2);
      }
      if (struct.isSetLexiconSize()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetReq()) {
        struct.req.write(oprot);
      }
      if (struct.isSetStringMap()) {
        {
          oprot.writeI32(struct.stringMap.size());
          for (Map.Entry<String, Double> _iter18 : struct.stringMap.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeDouble(_iter18.getValue());
          }
        }
      }
      if (struct.isSetPositionMap()) {
        {
          oprot.writeI32(struct.positionMap.size());
          for (Map.Entry<Integer, Double> _iter19 : struct.positionMap.entrySet())
          {
            oprot.writeI32(_iter19.getKey());
            oprot.writeDouble(_iter19.getValue());
          }
        }
      }
      if (struct.isSetLexiconSize()) {
        oprot.writeI32(struct.lexiconSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFIDFResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.req = new SentenceRequest();
        struct.req.read(iprot);
        struct.setReqIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map20 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.stringMap = new HashMap<String,Double>(2*_map20.size);
          String _key21;
          double _val22;
          for (int _i23 = 0; _i23 < _map20.size; ++_i23)
          {
            _key21 = iprot.readString();
            _val22 = iprot.readDouble();
            struct.stringMap.put(_key21, _val22);
          }
        }
        struct.setStringMapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.positionMap = new HashMap<Integer,Double>(2*_map24.size);
          int _key25;
          double _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readI32();
            _val26 = iprot.readDouble();
            struct.positionMap.put(_key25, _val26);
          }
        }
        struct.setPositionMapIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lexiconSize = iprot.readI32();
        struct.setLexiconSizeIsSet(true);
      }
    }
  }

}

